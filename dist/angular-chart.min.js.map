{"version":3,"sources":["angular-chart.min.js"],"names":["factory","exports","module","angular","require","Chart","define","amd","Error","ChartJsProvider","options","responsive","ChartJs","getOptions","type","typeOptions","extend","this","setOptions","customOptions","merge","defaults","$get","ChartJsFactory","$timeout","createChart","scope","elem","getChartOptions","hasData","canDisplay","cvs","ctx","getContext","chartGetColor","getChartColorFn","data","getChartData","destroyChart","chart","$emit","bindEvents","canUpdateChart","newVal","oldVal","length","Array","isArray","every","element","index","reduce","sum","carry","val","getEventHandler","action","triggerOnlyOnChange","lastState","point","points","evt","atEvent","getElementAtEvent","getPointAtEvent","atEvents","getElementsAtEvent","getPointsAtEvent","call","equals","getColors","colors","copy","chartColors","global","notEnoughColors","chartData","push","map","convertColor","color","getColor","rgbStringToRgb","hexToRgb","substr","getRandomColor","getRandomInt","alpha","slice","backgroundColor","rgba","pointBackgroundColor","pointHoverBackgroundColor","borderColor","pointBorderColor","pointHoverBorderColor","min","max","Math","floor","random","useExcanvas","join","concat","hex","bigint","parseInt","r","g","b","match","split","Number","getDataSets","chartLabels","chartSeries","chartDatasetOverride","getData","labels","series","datasetOverride","datasets","item","i","dataset","label","$","hoverBackgroundColor","chartOptions","onclick","chartClick","noop","onmousemove","chartHover","updateChart","values","forEach","update","isEmpty","value","Object","keys","clientHeight","destroy","restrict","chartType","link","watchData","watchOther","watchType","window","G_vmlCanvasManager","initElement","$watch","$on","resize","multiTooltipTemplate","tooltips","mode","elements","line","borderWidth","rectangle","legend","display","animation","provider","directive","name"],"mappings":"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","file":"angular-chart.min.js","sourcesContent":["/*!\n * angular-chart.js - An angular.js wrapper for Chart.js\n * http://jtblin.github.io/angular-chart.js/\n * Version: 1.1.1\n *\n * Copyright 2016 Jerome Touffe-Blin\n * Released under the BSD-2-Clause license\n * https://github.com/jtblin/angular-chart.js/blob/master/LICENSE\n */\n(function (factory) {\n  'use strict';\n  if (typeof exports === 'object') {\n    // Node/CommonJS\n    module.exports = factory(\n      typeof angular !== 'undefined' ? angular : require('angular'),\n      typeof Chart !== 'undefined' ? Chart : require('chart.js'));\n  }  else if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['angular', 'chart'], factory);\n  } else {\n    // Browser globals\n    if (typeof angular === 'undefined') {\n        throw new Error('AngularJS framework needs to be included, see https://angularjs.org/');\n    } else if (typeof Chart === 'undefined') {\n      throw new Error('Chart.js library needs to be included, see http://jtblin.github.io/angular-chart.js/');\n    }\n    factory(angular, Chart);\n  }\n}(function (angular, Chart) {\n  'use strict';\n\n  Chart.defaults.global.multiTooltipTemplate = '<%if (datasetLabel){%><%=datasetLabel%>: <%}%><%= value %>';\n  Chart.defaults.global.tooltips.mode = 'label';\n  Chart.defaults.global.elements.line.borderWidth = 2;\n  Chart.defaults.global.elements.rectangle.borderWidth = 2;\n  Chart.defaults.global.legend.display = false;\n  Chart.defaults.global.colors = [\n    '#97BBCD', // blue\n    '#DCDCDC', // light grey\n    '#F7464A', // red\n    '#46BFBD', // green\n    '#FDB45C', // yellow\n    '#949FB1', // grey\n    '#4D5360'  // dark grey\n  ];\n\n  var useExcanvas = typeof window.G_vmlCanvasManager === 'object' &&\n    window.G_vmlCanvasManager !== null &&\n    typeof window.G_vmlCanvasManager.initElement === 'function';\n\n  if (useExcanvas) Chart.defaults.global.animation = false;\n\n  return angular.module('chart.js', [])\n    .provider('ChartJs', ChartJsProvider)\n    .factory('ChartJsFactory', ['ChartJs', '$timeout', ChartJsFactory])\n    .directive('chartBase', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory(); }])\n    .directive('chartLine', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('line'); }])\n    .directive('chartBar', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('bar'); }])\n    .directive('chartHorizontalBar', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('horizontalBar'); }])\n    .directive('chartRadar', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('radar'); }])\n    .directive('chartDoughnut', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('doughnut'); }])\n    .directive('chartPie', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('pie'); }])\n    .directive('chartPolarArea', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('polarArea'); }])\n    .directive('chartBubble', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('bubble'); }])\n    .name;\n\n  /**\n   * Wrapper for chart.js\n   * Allows configuring chart js using the provider\n   *\n   * angular.module('myModule', ['chart.js']).config(function(ChartJsProvider) {\n   *   ChartJsProvider.setOptions({ responsive: false });\n   *   ChartJsProvider.setOptions('Line', { responsive: true });\n   * })))\n   */\n  function ChartJsProvider () {\n    var options = { responsive: true };\n    var ChartJs = {\n      Chart: Chart,\n      getOptions: function (type) {\n        var typeOptions = type && options[type] || {};\n        return angular.extend({}, options, typeOptions);\n      }\n    };\n\n    /**\n     * Allow to set global options during configuration\n     */\n    this.setOptions = function (type, customOptions) {\n      // If no type was specified set option for the global object\n      if (! customOptions) {\n        customOptions = type;\n        options = angular.merge(options, customOptions);\n      } else {\n        // Set options for the specific chart\n        options[type] = angular.merge(options[type] || {}, customOptions);\n      }\n\n      angular.merge(ChartJs.Chart.defaults, options);\n    };\n\n    this.$get = function () {\n      return ChartJs;\n    };\n  }\n\n  function ChartJsFactory (ChartJs, $timeout) {\n    return function chart (type) {\n      return {\n        restrict: 'CA',\n        scope: {\n          chartGetColor: '=?',\n          chartType: '=',\n          chartData: '=?',\n          chartLabels: '=?',\n          chartOptions: '=?',\n          chartSeries: '=?',\n          chartColors: '=?',\n          chartClick: '=?',\n          chartHover: '=?',\n          chartDatasetOverride: '=?'\n        },\n        link: function (scope, elem/*, attrs */) {\n          if (useExcanvas) window.G_vmlCanvasManager.initElement(elem[0]);\n\n          // Order of setting \"watch\" matter\n          scope.$watch('chartData', watchData, true);\n          scope.$watch('chartSeries', watchOther, true);\n          scope.$watch('chartLabels', watchOther, true);\n          scope.$watch('chartOptions', watchOther, true);\n          scope.$watch('chartColors', watchOther, true);\n          scope.$watch('chartDatasetOverride', watchOther, true);\n          scope.$watch('chartType', watchType, false);\n\n          scope.$on('$destroy', function () {\n            destroyChart(scope);\n          });\n\n          scope.$on('$resize', function () {\n            if (scope.chart) scope.chart.resize();\n          });\n\n          function watchData (newVal, oldVal) {\n            if (! newVal || ! newVal.length || (Array.isArray(newVal[0]) && ! newVal[0].length)) {\n              destroyChart(scope);\n              return;\n            }\n            var chartType = type || scope.chartType;\n            if (! chartType) return;\n\n            if (scope.chart && canUpdateChart(newVal, oldVal))\n              return updateChart(newVal, scope);\n\n            createChart(chartType, scope, elem);\n          }\n\n          function watchOther (newVal, oldVal) {\n            if (isEmpty(newVal)) return;\n            if (angular.equals(newVal, oldVal)) return;\n            var chartType = type || scope.chartType;\n            if (! chartType) return;\n\n            // chart.update() doesn't work for series and labels\n            // so we have to re-create the chart entirely\n            createChart(chartType, scope, elem);\n          }\n\n          function watchType (newVal, oldVal) {\n            if (isEmpty(newVal)) return;\n            if (angular.equals(newVal, oldVal)) return;\n            createChart(newVal, scope, elem);\n          }\n        }\n      };\n    };\n\n    function createChart (type, scope, elem) {\n      var options = getChartOptions(type, scope);\n      if (! hasData(scope) || ! canDisplay(type, scope, elem, options)) return;\n\n      var cvs = elem[0];\n      var ctx = cvs.getContext('2d');\n\n      scope.chartGetColor = getChartColorFn(scope);\n      var data = getChartData(type, scope);\n      // Destroy old chart if it exists to avoid ghost charts issue\n      // https://github.com/jtblin/angular-chart.js/issues/187\n      destroyChart(scope);\n\n      scope.chart = new ChartJs.Chart(ctx, {\n        type: type,\n        data: data,\n        options: options\n      });\n      scope.$emit('chart-create', scope.chart);\n      bindEvents(cvs, scope);\n    }\n\n    function canUpdateChart (newVal, oldVal) {\n      if (newVal && oldVal && newVal.length && oldVal.length) {\n        return Array.isArray(newVal[0]) ?\n        newVal.length === oldVal.length && newVal.every(function (element, index) {\n          return element.length === oldVal[index].length; }) :\n          oldVal.reduce(sum, 0) > 0 ? newVal.length === oldVal.length : false;\n      }\n      return false;\n    }\n\n    function sum (carry, val) {\n      return carry + val;\n    }\n\n    function getEventHandler (scope, action, triggerOnlyOnChange) {\n      var lastState = {\n        point: void 0,\n        points: void 0\n      };\n      return function (evt) {\n        var atEvent = scope.chart.getElementAtEvent || scope.chart.getPointAtEvent;\n        var atEvents = scope.chart.getElementsAtEvent || scope.chart.getPointsAtEvent;\n        if (atEvents) {\n          var points = atEvents.call(scope.chart, evt);\n          var point = atEvent ? atEvent.call(scope.chart, evt)[0] : void 0;\n\n          if (triggerOnlyOnChange === false ||\n            (! angular.equals(lastState.points, points) && ! angular.equals(lastState.point, point))\n          ) {\n            lastState.point = point;\n            lastState.points = points;\n            scope[action](points, evt, point);\n          }\n        }\n      };\n    }\n\n    function getColors (type, scope) {\n      var colors = angular.copy(scope.chartColors ||\n        ChartJs.getOptions(type).chartColors ||\n        Chart.defaults.global.colors\n      );\n      var notEnoughColors = colors.length < scope.chartData.length;\n      while (colors.length < scope.chartData.length) {\n        colors.push(scope.chartGetColor());\n      }\n      // mutate colors in this case as we don't want\n      // the colors to change on each refresh\n      if (notEnoughColors) scope.chartColors = colors;\n      return colors.map(convertColor);\n    }\n\n    function convertColor (color) {\n      // Allows RGB and RGBA colors to be input as a string: e.g.: \"rgb(159,204,0)\", \"rgba(159,204,0, 0.5)\"\n      if (typeof color === 'string' && color[0] === 'r') return getColor(rgbStringToRgb(color));\n      // Allows hex colors to be input as a string.\n      if (typeof color === 'string' && color[0] === '#') return getColor(hexToRgb(color.substr(1)));\n      // Allows colors to be input as an object, bypassing getColor() entirely\n      if (typeof color === 'object' && color !== null) return color;\n      return getRandomColor();\n    }\n\n    function getRandomColor () {\n      var color = [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];\n      return getColor(color);\n    }\n\n    function getColor (color) {\n      var alpha = color[3] || 1;\n      color = color.slice(0, 3);\n      return {\n        backgroundColor: rgba(color, 0.2),\n        pointBackgroundColor: rgba(color, alpha),\n        pointHoverBackgroundColor: rgba(color, 0.8),\n        borderColor: rgba(color, alpha),\n        pointBorderColor: '#fff',\n        pointHoverBorderColor: rgba(color, alpha)\n      };\n    }\n\n    function getRandomInt (min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    function rgba (color, alpha) {\n      // rgba not supported by IE8\n      return useExcanvas ? 'rgb(' + color.join(',') + ')' : 'rgba(' + color.concat(alpha).join(',') + ')';\n    }\n\n    // Credit: http://stackoverflow.com/a/11508164/1190235\n    function hexToRgb (hex) {\n      var bigint = parseInt(hex, 16),\n        r = (bigint >> 16) & 255,\n        g = (bigint >> 8) & 255,\n        b = bigint & 255;\n\n      return [r, g, b];\n    }\n\n    function rgbStringToRgb (color) {\n      var match = color.match(/^rgba?\\(([\\d,.]+)\\)$/);\n      if (! match) throw new Error('Cannot parse rgb value');\n      color = match[1].split(',');\n      return color.map(Number);\n    }\n\n    function hasData (scope) {\n      return scope.chartData && scope.chartData.length;\n    }\n\n    function getChartColorFn (scope) {\n      return typeof scope.chartGetColor === 'function' ? scope.chartGetColor : getRandomColor;\n    }\n\n    function getChartData (type, scope) {\n      var colors = getColors(type, scope);\n      return Array.isArray(scope.chartData[0]) ?\n        getDataSets(scope.chartLabels, scope.chartData, scope.chartSeries || [], colors, scope.chartDatasetOverride) :\n        getData(scope.chartLabels, scope.chartData, colors, scope.chartDatasetOverride);\n    }\n\n    function getDataSets (labels, data, series, colors, datasetOverride) {\n      return {\n        labels: labels,\n        datasets: data.map(function (item, i) {\n          var dataset = angular.extend({}, colors[i], {\n            label: series[i],\n            data: item\n          });\n          if (datasetOverride && datasetOverride.length >= i) {\n            // https://github.com/jtblin/angular-chart.js/issues/510\n            //angular.merge(dataset, datasetOverride[i]);\n            $.extend(true, dataset, datasetOverride[i]);\n          }\n          return dataset;\n        })\n      };\n    }\n\n    function getData (labels, data, colors, datasetOverride) {\n      var dataset = {\n        labels: labels,\n        datasets: [{\n          data: data,\n          backgroundColor: colors.map(function (color) {\n            return color.pointBackgroundColor;\n          }),\n          hoverBackgroundColor: colors.map(function (color) {\n            return color.backgroundColor;\n          })\n        }]\n      };\n      if (datasetOverride) {\n        angular.merge(dataset.datasets[0], datasetOverride);\n      }\n      return dataset;\n    }\n\n    function getChartOptions (type, scope) {\n      return angular.extend({}, ChartJs.getOptions(type), scope.chartOptions);\n    }\n\n    function bindEvents (cvs, scope) {\n      cvs.onclick = scope.chartClick ? getEventHandler(scope, 'chartClick', false) : angular.noop;\n      cvs.onmousemove = scope.chartHover ? getEventHandler(scope, 'chartHover', true) : angular.noop;\n    }\n\n    function updateChart (values, scope) {\n      if (Array.isArray(scope.chartData[0])) {\n        scope.chart.data.datasets.forEach(function (dataset, i) {\n          dataset.data = values[i];\n        });\n      } else {\n        scope.chart.data.datasets[0].data = values;\n      }\n\n      scope.chart.update();\n      scope.$emit('chart-update', scope.chart);\n    }\n\n    function isEmpty (value) {\n      return ! value ||\n        (Array.isArray(value) && ! value.length) ||\n        (typeof value === 'object' && ! Object.keys(value).length);\n    }\n\n    function canDisplay (type, scope, elem, options) {\n      // TODO: check parent?\n      if (options.responsive && elem[0].clientHeight === 0) {\n        $timeout(function () {\n          createChart(type, scope, elem);\n        }, 50, false);\n        return false;\n      }\n      return true;\n    }\n\n    function destroyChart(scope) {\n      if(! scope.chart) return;\n      scope.chart.destroy();\n      scope.$emit('chart-destroy', scope.chart);\n    }\n  }\n}));\n"],"sourceRoot":"/source/"}